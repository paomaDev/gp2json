<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>526</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/bin/bash

# Check if input file is provided
if [ -z "$1" ]; then
  echo "Usage: $0 &lt;input_file.txt&gt;"
  exit 1
fi

INPUT_FILE="$1"
DB_FILE="data.sqlite"

# Extract the base name and directory of the input file
BASE_NAME=$(basename "$INPUT_FILE" .txt)
INPUT_DIR=$(dirname "$INPUT_FILE")
OUTPUT_FILE="$INPUT_DIR/$BASE_NAME.json" # Place output in the same directory"

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
  echo "Error: Input file '$INPUT_FILE' not found."
  exit 1
fi

# Remove existing database file
if [ -f "$DB_FILE" ]; then
  rm "$DB_FILE"
fi

# Create SQLite database and import data
echo "Creating SQLite database..."
sqlite3 "$DB_FILE" &lt;&lt;EOF
.mode tabs
.import "$INPUT_FILE" my_table
EOF

# Check if table was created successfully
if [[ $(sqlite3 "$DB_FILE" "SELECT name FROM sqlite_master WHERE type='table' AND name='my_table';") == "" ]]; then
  echo "Error: Failed to import data into SQLite table."
  exit 1
fi

# Perform SQL query to summarize data, grouping by immediate directory, and output as JSON to a file
sqlite3 -json "$DB_FILE" "SELECT IFNULL(CASE WHEN Path LIKE '/Users/%/Library/%' THEN substr(Path,1,(length('/Users/') + length(substr(Path, length('/Users/') + 1,instr(substr(Path,length('/Users/') + 1),'/'))) + length('/Library/') + iif(instr(substr(Path,instr(Path,'/Library/')+10),'/')=0,-1,instr(substr(Path,instr(Path,'/Library/')+10),'/')))) WHEN Path LIKE '/Users/%/%' THEN substr(Path,1,(length('/Users/') + length(substr(Path, length('/Users/') + 1,instr(substr(Path,length('/Users/') + 1),'/'))) + instr(substr(Path,(length('/Users/') + length(substr(Path, length('/Users/') + 1,instr(substr(Path,length('/Users/') + 1),'/')))+1)),'/'))) WHEN Path LIKE '/%' THEN substr(Path, 1, instr(substr(Path, 2), '/') + 1) ELSE '/' END, 'Root') AS fsPath, SUM(Size) AS byteSize FROM my_table GROUP BY fsPath;" &gt; "$OUTPUT_FILE"

# Remove the temporary SQLite file
rm "$DB_FILE"

echo "JSON output written to $OUTPUT_FILE"
osascript -e 'display notification "JSON output written to '$OUTPUT_FILE'" with title "Success"'
</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>1</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>90EC5A87-FDCE-4A2B-A7F3-A9F7A23367A8</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>DA76EED1-BA64-4570-B3EA-EAFE3A832D90</string>
				<key>UUID</key>
				<string>2C2CA112-1993-4BB6-9716-D59CD7BC48AA</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>521.000000:685.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
